"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

ROOT_DIR = BASE_DIR.parent  # 项目根目录
SOURCE_DIR = BASE_DIR  # 源代码所在目录
RESOURCES_DIR = ROOT_DIR / "resources"  # 资源文件所在目录

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ok))2mb#mev0$i$9i9-c9130*r26iveph$$=-927l(uwp9i4(k'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
CUSTOM_DEBUG = DEBUG and True

ALLOWED_HOSTS = [
    'localhost', '127.0.0.1',  # 允许本地开发（Django DEBUG=False 导致 400 Bad Request 错误）
]

# 或者允许所有主机（仅限开发环境）
# ALLOWED_HOSTS = ['*']  # 生产环境不要使用

# Application definition

# 告诉 Django 项目中包含哪些应用，激活应用的各项功能（模型、视图、模板等）
# 使 Django 能够识别应用的数据库模型，允许通过 makemigrations 和 migrate 管理数据库迁移
# 加载每个应用的 apps.py 中的 AppConfig 类，执行应用的初始化代码（在 AppConfig.ready() 方法中）
# 自动发现应用的 admin.py 文件，将模型注册到 Django 管理后台
INSTALLED_APPS = [
    # 美化类 app 需要放在最前面
    "drf_material",  # 基于 Google Material Design 的现代化界面，目前已知的是美化了 drf 的登录页面
    "simpleui",  # Django Admin界面美化第三方插件，基于 element-ui + vue 开发 -> 国产，但是需要稍微配置一下

    # "grappelli",  # Django Admin 界面美化第三方插件 -> 一般，有点简单
    # "colorfield", "admin_interface",  # Django Admin 界面美化第三方插件 -> 没有太大的改变

    'django.contrib.admin',  # 管理界面
    'django.contrib.auth',  # 用户认证系统
    'django.contrib.contenttypes',  # 内容类型框架
    'django.contrib.sessions',  # 会话管理
    'django.contrib.messages',  # 一次性消息框架
    'django.contrib.staticfiles',  # 静态文件管理

    "corsheaders",
    "django_extensions",

    "rest_framework",  # 用于开发 RESTful API
    "rest_framework.authtoken",  # DRF 自带的 Token 认证
    "rest_framework_simplejwt",  # rest_framework_simplejwt
    # "rest_framework_simplejwt.token_blacklist",
    "drf_spectacular",

    "ninja_extra",

    "apps.ninjaapi",
    "apps.index",
    "apps.powernetwork",
    "apps.powernetworkreport",
    "apps.testaccount",
    "apps.testdrfapi",
]

# Django 的 admin 和普通视图使用 Session 认证，过期时间设置
SESSION_COOKIE_AGE = 60 * 15 * 1  # # 设置 Session 过期时间（django 默认 是 1209600 秒，即 14 天）
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # 浏览器关闭时 Session 过期（默认为 False）
SESSION_SAVE_EVERY_REQUEST = False  # 每次请求更新 Session 过期时间（默认为 False）

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # 跨域请求中间件，必须放在最前

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    "django.middleware.locale.LocaleMiddleware",  # 设置国际化中间件

    # whitenoise 中间件，用于提供静态文件服务
    'whitenoise.middleware.WhiteNoiseMiddleware',

]

ROOT_URLCONF = 'backend.urls'

# 模板配置
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

# 密码验证
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,  # 最小长度
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# todo: 创建 logs 文件夹
def _create_logs_directory():
    logs_directory = ROOT_DIR / "logs"
    if logs_directory.exists():
        return
    logs_directory.mkdir()


_create_logs_directory()

# django 内置完整的日志记录框架
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'json': {
            '()': 'pythonjsonlogger.jsonlogger.JsonFormatter',
            'format': '''
            asctime: %(asctime)s
            levelname: %(levelname)s
            message: %(message)s
            module: %(module)s
            pathname: %(pathname)s
            exc_info: %(exc_info)s
            process: %(process)d
            thread: %(thread)d
        '''
        }
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': ROOT_DIR / 'logs/django_errors.log',  # 目录不会自动创建
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
        },
        'json_file': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': ROOT_DIR / 'logs/django_errors.json',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'formatter': 'json',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file', 'mail_admins', 'json_file'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['file', 'mail_admins', 'json_file'],
            'level': 'ERROR',
            'propagate': False,
        },
        'myapp': {
            'handlers': ['console', 'file', 'json_file'],
            'level': 'DEBUG',
        },
        'critical': {
            'handlers': ['mail_admins'],
            'level': 'CRITICAL',
        }
    }
}
# todo: [to be sloved] 因为 RESTframework 是有前端文件的，后面使用时会全部放到这个目录
# STATIC_ROOT = BASE_DIR / "static"

# 设置 django 静态文件 URL 前缀，形如：{STATIC_URL}/rest_framework/js/bootstrap.min.js
# 所以，这个并不是决定 django 搜索 static 的方式，只是决定请求的路径？
STATIC_URL = '/django/static/'

# CDN 集成
# STATIC_URL = 'https://cdn.example.com/static/'

# 指定额外静态文件目录
STATICFILES_DIRS = [
    BASE_DIR / 'static'
]

# 设置静态文件收集目录（生产环境使用）（WhiteNoise 服务此目录）
# - Django 项目：各 app 的 static 目录、STATICFILES_DIRS 目录、第三方库的 static 文件
# - collectstatic 命令：将所有静态文件收集到 -> STATIC_ROOT 指定目录 -> 生产环境静态文件服务
# - 在开发环境中，Django 会直接从各 app 的 static/ 目录和 STATICFILES_DIRS 提供静态文件。
# - STATIC_ROOT 在开发模式下不会被使用，这是为生产环境准备的静态文件集中存储位置。
STATIC_ROOT = BASE_DIR / 'staticfiles'

# 静态文件查找器（默认包含）
# STATICFILES_FINDERS = [
#     'django.contrib.staticfiles.finders.FileSystemFinder',
#     'django.contrib.staticfiles.finders.AppDirectoriesFinder',
# ]

# 配置登录重定向
# LOGIN_REDIRECT_URL = '/'
# LOGOUT_REDIRECT_URL = '/api-auth/login/'

LOGIN_REDIRECT_URL = '/'  # 登录成功后重定向的URL
# 这个被 drf 修改后导致 django admin 登出路由有问题
LOGOUT_REDIRECT_URL = '/admin/login/'  # 登出后重定向
# todo: 登录页面的 URL（当使用 login_required 装饰器时）
LOGIN_URL = '/login/'

# todo: 创建 production_settings.py 和 dev_settings.py

# ------------------------------------whitenoise------------------------------------ #
# WhiteNoise 是一个高效的 Python 静态文件服务库
# 特别适用于 Django、Flask 等 Python Web 框架的生产环境部署。
# 它使你的应用能够直接服务静态文件，无需依赖 Nginx 或 CDN，大幅简化部署流程。

# todo: 详细了解如何使用 whitenoise 进行正式环境的部署

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# 静态文件压缩
# WHITENOISE_USE_FINDERS = True  # 开发时直接从 app 提供
# WHITENOISE_KEEP_ONLY_HASHED_FILES = True  # 保留哈希版本文件（解决性能问题）

# ------------------------------------drf------------------------------------ #
# drf 配置字典
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 50,
    'DATETIME_FORMAT': '%Y-%m-%d %H:%M:%S',
    # 返回 response 对象所用的类
    'DEFAULT_RENDER_CLASSES': [
        'rest_framework.renders.JSONRenderer',
        'rest_framework.renders.BrowsableAPIRenderer',
    ],
    # 解析器，如何解析 request 请求中的 request.data
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
    # 权限相关配置：必须登录才能调用接口
    # 此处为全局权限控制，所有 DRF 视图（API 端点）默认要求用户认证（应该是限定了 DRF 视图才会如此）
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',

        # Use Django's standard `django.contrib.auth` permissions,
        # or allow read-only access for unauthenticated users.
        # 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ],
    'UNAUTHENTICATED_USER': None,  # 未认证时不设置匿名用户
    # 认证相关配置
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 启用 Session 认证，使用 Django 的会话框架，过期时间由 Django 的会话设置控制。缺点不适合前后端分离架构。
        # 实践发现，这个控制了 drf 的 api-auth/ 相关登入登出
        # 而且，django 自带的 admin 与其是共用的，登入登出二者都会受影响
        # rest_framework.urls 提供的登录视图是 Django admin 登录视图的一个简单包装，注销视图也是基本的。
        'rest_framework.authentication.SessionAuthentication',

        # [command] python manage.py drf_create_token {username} 可以手动生成 Token
        'rest_framework.authentication.TokenAuthentication',

        # DRF 的默认 Token 认证是永不过期的，但可以使用 djangorestframework-simplejwt 库轻松设置 JWT 过期时间
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    # "URL_FIELD_NAME": 'link', # todo: [to be understood] URL_FIELD_NAME
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',  # DRF 接口文档生成
}

# ------------------------------------rest_framework_simplejwt------------------------------------ #
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60 * 12),  # Access Token 有效期
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),  # Refresh Token 有效期
    'ROTATE_REFRESH_TOKENS': False,  # 是否允许刷新 Refresh Token
    'BLACKLIST_AFTER_ROTATION': True,  # 刷新后黑名单旧令牌
    'ALGORITHM': 'HS256',  # 加密算法
    'SIGNING_KEY': SECRET_KEY,  # 签名密钥
    'AUTH_HEADER_TYPES': ('Bearer',),  # 认证头类型
    'USER_ID_FIELD': 'id',  # 用户 ID 字段
    'USER_ID_CLAIM': 'user_id',  # 用户 ID 在 JWT 中的声明
    'UPDATE_LAST_LOGIN': True,  # 更新用户最后登录时间
}

# ------------------------------------corsheaders------------------------------------ #
# [question] 对于前后端分离项目，后端似乎没必要设置 跨域资源共享 (CORS) 吧？
# [answer] 浏览器发送带有 Origin 头的请求，服务器响应包含 Access-Control-Allow-Origin 头，故后端也需要！

# 生产环境推荐指定域名白名单（代替 ALLOW_ALL）
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8887",
    "http://localhost:8888",
    "http://localhost:12000",
]

# CORS_ALLOW_ALL_ORIGINS = True  # 开发环境，生产环境绝对不要设为 True

# 效果：响应中添加头 Access-Control-Allow-Credentials: true
# 用途：跨域请求中允许携带 Cookies（包括 Session 认证）、Authorization 认证头、TLS 客户端证书
CORS_ALLOW_CREDENTIALS = True  # 允许携带 Cookie

CORS_EXPOSE_HEADERS = ["Set-Cookie"]  # 暴露 Set-Cookie 头

# ------------------------------------drf-spectacular------------------------------------ #
SPECTACULAR_SETTINGS = {
    'TITLE': 'DRF OpenAPI Document',
    'DESCRIPTION': '无',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,

    # 修复认证问题（ai 生成的，不知道什么意思）
    'COMPONENT_SPLIT_REQUEST': True,
    'SCHEMA_PATH_PREFIX': r'/api/v[0-9]',

    # 配置全局认证方案（用于Swagger UI）
    # 'DEFAULT_AUTHENTICATION_CLASSES': [
    #     'rest_framework.authentication.SessionAuthentication',
    #     'rest_framework.authentication.TokenAuthentication',
    #     'rest_framework_simplejwt.authentication.JWTAuthentication',
    # ],

    # 设置全局认证方案
    # 'AUTHENTICATION_SCHEMES': {
    #     'SessionAuthentication': 'rest_framework.authentication.SessionAuthentication',
    #     'TokenAuthentication': 'rest_framework.authentication.TokenAuthentication',
    # },

    # 自定义 UI 主题（但是我没发现区别）
    # 'SWAGGER_UI_SETTINGS': {
    #     'deepLinking': True,
    #     'persistAuthorization': True,
    #     'displayOperationId': True,
    # },
    # 'REDOC_UI_SETTINGS': {
    #     'scrollYOffset': 50,
    #     'hideLoading': True,
    # },
}

# ------------------------------------simpleui------------------------------------ #
# 去掉默认 Logo 或换成自己 Logo 链接
# SIMPLEUI_LOGO = 'https://th.bing.com/th/id/R2411a2b340731d67dfa0d84503e915e3?rik=zmYce%2fLys72JVQ&pid=ImgRaw'

# 隐藏右侧 SimpleUI 广告链接和使用分析
SIMPLEUI_HOME_INFO = False
SIMPLEUI_ANALYSIS = False

# 设置默认主题，指向主题 css 文件名
# Admin Lte 风格 - admin.lte.css，Element-ui 风格 - element.css，layui 风格 - layui.css，Purple 风格 - purple.css ...
# SIMPLEUI_DEFAULT_THEME = 'purple.css'

# 自定义菜单
# 左侧可折叠菜单是 Simple UI 系统默认菜单
# 在大多数情况下，Simple UI 系统默认菜单不能满足需求，这时你就需要自定义菜单了，比如添加新的选项或给菜单选项分配新的图标
# SIMPLEUI_CONFIG = {}

# 还有进一步的内容，可以参见链接内容：https://pythondjango.cn/django/applications/4-django-simple-ui-configuration/
# 主要指：SimpleUI 默认首页可以利用 iframe 标签，我们指向自定义页面，实现自定义首页
